<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pDiem on Phala Network Wiki</title>
    <link>https://wiki.phala.network/en-us/docs/pdiem/</link>
    <description>Recent content in pDiem on Phala Network Wiki</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://wiki.phala.network/en-us/docs/pdiem/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deploy Local Testnet</title>
      <link>https://wiki.phala.network/en-us/docs/pdiem/deploy-local-testnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wiki.phala.network/en-us/docs/pdiem/deploy-local-testnet/</guid>
      <description>There are two options to run the pdiem demo:
 Use our Docker Compose file Build from the source and run it directly  This guide will only cover the Docker Compose approach because it handles everything automatically for you. It installs the dependencies, builds the code, starts the network with the components connected correctly, and start them.
In the development environment we build the code natively. The pro users who want to hack on our code can look into the Dockerfiles and docker-compose file to learn how the system is configured.</description>
    </item>
    
    <item>
      <title>Play with pDiem</title>
      <link>https://wiki.phala.network/en-us/docs/pdiem/play-with-pdiem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wiki.phala.network/en-us/docs/pdiem/play-with-pdiem/</guid>
      <description>The pdiem full stack includes:
 A local Diem testnet: diem, diem-cli A Phala Network local testnet with the pdiem contract: phala-node, phala-pruntime, phala-phost A relayer to connect the both networks: pdiem-relayer  With the pdiem full stack running, we are going to send some Diem transactions to the pdiem deposit account, and check if the pdiem contract has received it.
Create Diem accounts Start the diem-cli from the same directory by:</description>
    </item>
    
    <item>
      <title>Reservation-based Model</title>
      <link>https://wiki.phala.network/en-us/docs/pdiem/reservation-based-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wiki.phala.network/en-us/docs/pdiem/reservation-based-model/</guid>
      <description>A bridge connects the local blockchain to a remote blockchain. pDiem follows the &amp;ldquo;reservation asset&amp;rdquo; cross-chain asset transferring pattern (see the equivalent pattern defined in XCM Format). In our case, pDiem (and its parachain) is the local blockchain, and Diem is the remote blockchain.
The pDiem bridge controls a set of sovereign accounts (see XCM Format - Definitions) on the Diem side, which hold all the Diem assets transferred to pDiem side.</description>
    </item>
    
    <item>
      <title>Light Validation Client</title>
      <link>https://wiki.phala.network/en-us/docs/pdiem/light-validation-client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wiki.phala.network/en-us/docs/pdiem/light-validation-client/</guid>
      <description>The Basics A minimal cross-chain bridge can transfer assets between the two blockchains. In the reservation-based model, it requires that the local blockchain can confirm some deposit to its sovereign accounts, and the remote blockchain can confirm the withdraw commands from the local blockchain. The validation of the blockchain is done by full nodes, but they are too heavy to fit into a smart contract or blockchain, in terms of the computation and the storage.</description>
    </item>
    
    <item>
      <title>Contract Implementation</title>
      <link>https://wiki.phala.network/en-us/docs/pdiem/contract-implementation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wiki.phala.network/en-us/docs/pdiem/contract-implementation/</guid>
      <description>The pdiem contract implements a Diem light client and wallet. On the one hand, the pdiem relayers talks to the contract to sync the transactiosn between Diem side and pdiem side. On the other hand, it provides the interface for users to manage their cross-chain assets.
The pdiem contract acts as a regular Diem wallet. It holds the private keys inside its Phala Network confidential contract. So the contract can control some wallets to receive or send funds on the Diem blockchain.</description>
    </item>
    
    <item>
      <title>The Relayer</title>
      <link>https://wiki.phala.network/en-us/docs/pdiem/the-relayer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wiki.phala.network/en-us/docs/pdiem/the-relayer/</guid>
      <description>The pdiem relayer is the component to sync data between pdiem and the Diem blockchain. It runs off-chain, connects to the both blockchains, and watch the related transactions.
Codebase: Phala-Network/pdiem-relayer.
Who runs the relayer Anyone can run a relayer, and in theory only one honest relayer is required to operate the pdiem bridge, because all the messages submitted by the relayer are validated by the Diem blockchain or the pdiem contract.</description>
    </item>
    
    <item>
      <title>Future Works</title>
      <link>https://wiki.phala.network/en-us/docs/pdiem/future-works/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wiki.phala.network/en-us/docs/pdiem/future-works/</guid>
      <description>pDiem is a fast growing project. We plan to add the features below in the near future:
 Contract  Token transfer: integrate with Assets confidential contract and XCM Move to Ink! confidential smart contract (WASM) Confirm the successful withdraw Multisig collateral   Relayer  Relay messages back to Diem Relay withdraw event to the pdiem contract   Economic  Incentives design for the relayer   User interface: integrate with Phala-Network/apps-ng  </description>
    </item>
    
    <item>
      <title>Advanced: Hardware Mode</title>
      <link>https://wiki.phala.network/en-us/docs/pdiem/hardware-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wiki.phala.network/en-us/docs/pdiem/hardware-mode/</guid>
      <description>By default, the demo is built with SGX SDK software mode. It&amp;rsquo;s designed for development environment. However, to protect the data and logic inside the Enclave, it must run in hardware mode.
Intel SGX SDK comes with three modes:
 Software: it runs in the simulation environment, and offers no protection to the code or data Hardware Dev: it runs in the real hardware environment, but allows debuggers to attach to it and thus no protection as well Hardware Prod: it runs in the real hardware environment and disallows debugger to attach, but has to be signed with production certificates  To run SGX programs in the hardware mode, you need to install the SGX driver first.</description>
    </item>
    
  </channel>
</rss>
