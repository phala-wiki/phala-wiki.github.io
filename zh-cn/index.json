[
{
	"uri": "https://wiki.phala.network/zh-cn/basics/",
	"title": "基础",
	"tags": [],
	"description": "",
	"content": "章节 1 基础 运行一个全节点以支持网络连通性，或者成为一个 Gatekeeper，增强网络的安全性，并同时获得丰厚的收益。\n"
},
{
	"uri": "https://wiki.phala.network/zh-cn/",
	"title": "Phala Network Wiki",
	"tags": [],
	"description": "",
	"content": "Phala Network Phala Network 被设计为 Web3.0 模式下的数据交易基础设施，通过 Phala Network 的保密智能合约能力提供隐私数据的收集、托管、分析与交易服务。\n精选教程  运行全节点 运行 Gatekeeper  "
},
{
	"uri": "https://wiki.phala.network/zh-cn/basics/run-a-gatekeeper/",
	"title": "运行 Gatekeeper",
	"tags": [],
	"description": "",
	"content": "This guide will instruct you how to set up a validator node on the Phala Network.\nPreliminaries Running a Gatekeeper on a live network is a lot of responsibility! You will be accountable for not only your own stake, but also the stake of your current nominators. If you make a mistake and get slashed, your money and your reputation will be at risk. However, running a Gatekeeper can also be very rewarding, knowing that you contribute to the security of a decentralized network while growing your stash.\nSince security is so important to running a successful Gatekeeper, you should take a look at Phala Network\u0026rsquo;s the secure validator information to make you understand the factors to consider when constructing your infrastructure. The Web3 Foundation also maintains a reference implementation for a secure validator set-up that you can use by deploying yourself (video walkthrough is available here). As you progress in your journey as a Gatekeeper, you will likely want to use this repository as a starting point for your own modifications and customizations.\nIf you need help, please reach out on the Phala Network Group on Telegram. The team and other Gatekeepers are there to help answer questions and provide experience.\nHow many PHA do I need? You can have a rough estimate on that by using the methods listed here. Gatekeepers are elected based on Phragmen\u0026rsquo;s algorithm. To be elected into the set, you need a minimum stake behind your Gatekeeper. This stake can come from yourself or from nominators. This means that as a minimum, you will need enough PHA to set up Stash and Controller accounts with the existential deposit, plus a little extra for transaction fees. The rest can come from nominators.\nWarning: Any PHA that you stake for your Gatekeeper is liable to be slashed, meaning that an insecure or improper setup may result in loss of PHA tokens! If you are not confident in your ability to run a Gatekeeper node, it is recommended to nominate your PHA to a trusted Gatekeeper node instead.\nInitial Set-up Requirements You will likely run your Gatekeeper on a server with TEE hardware running Linux. For this guide we will be using Ubuntu 18.04, but the instructions should be similar for other platforms.\nThe transactions weights in Phala Network were benchmarked on standard hardware. It is recommended that Gatekeepers run at least the standard hardware in order to ensure they are able to process all blocks in time. The following are not minimum requirements but if you decide to run with less than this beware that you might have performance issue.\nStandard Hardware For the full details of the standard hardware please see here.\n CPU - 2 cores, with Intel SGX capability. Storage - A NVMe solid state drive. Should be reasonably sized to deal with blockchain growth. Starting around 80GB - 160GB will be okay for the first six months of Phala Network, but will need to be re-evaluated every six months. Memory - 2GB - 8GB. 2GB is really the minimum memory you should operate your Gatekeeper with, anything less than this make build times too inconvenient. For better performance you can bump it up to 4GB or 8GB, but anything more than that is probably over-kill. In order to compile the binary yourself you will likely need ~8GB.  The specs posted above are by no means the minimum specs that you could use when running a Gatekeeper, however you should be aware that if you are using less you may need to toggle some extra optimizations in order to be equal to other Gatekeepers that are running the standard.\nInstall Intel SGX driver \u0026amp; platform software You can find the latest Linux SGX driver from the official download page. Make sure to install:\n SGX Linux DCAP Driver (Under /opt) SGX Linux SDK SGX Platform Swoftware  The dockerfile offered by Teaclave SGX SDK is a good reference of how to install the SGX driver, SDK and platform software.\nInstall the phala-node Binary Download the latest Phala Network binary from the Github release page.\nYou can also build the phala-node binary from the Phala-Network/phala-blockchain repository on GitHub using the source code available in the master branch. You will need to prepare the rust build environment described in the Run a Full Node tutorial.\n Note: If you prefer to use SSH rather than HTTPS, you can replace the first line of the below with git clone git@github.com/Phala-Network/phala-blockchain.git.\n git clone https://github.com/Phala-Network/phala-blockchain cd phala-blockchain ./scripts/init.sh cargo build –-release This step will take a while (generally 10 - 40 minutes, depending on your hardware).\n Note if you run into compile errors, you may have to switch to a less recent nightly. This can be done by running:\nrustup install nightly-2020-05-15 rustup override set nightly-2020-05-15 rustup target add wasm32-unknown-unknown --toolchain nightly-2020-05-15  If you are interested in generating keys locally, you can also install subkey from the same directory. You may then take the generated subkey executable and transfer it to an air-gapped machine for extra security.\ncargo install --force --git https://github.com/paritytech/substrate subkey Synchronize Chain Data  Note: By default, Gatekeeper nodes are in archive mode. If you\u0026rsquo;ve already synced the chain not in archive mode, you must first remove the database with phala-node purge-chain and then ensure that you run Phala Network with the --pruning=archive option.\nYou may run a Gatekeeper node in non-archive mode by adding the following flags: -unsafe-pruning --pruning OF BLOCKS\u0026gt;, but note that an archive node and non-archive node\u0026rsquo;s databases are not compatible with each other, and to switch you will need to purge the chain data.\n You can begin syncing your node by running the following command:\n./phala-node --pruning=archive if you do not want to start in Gatekeeper mode right away.\nThe --pruning=archive flag is implied by the --validator and --sentry flags, so it is only required explicitly if you start your node without one of these two options. If you do not set your pruning to archive node, even when not running in Gatekeeper and sentry mode, you will need to re-sync your database when you switch.\n Note: Gatekeepers should sync using the RocksDb backend. This is implicit by default, but can be explicit by passing the --database RocksDb flag. In the future, it is recommended to switch to using the faster and more efficient ParityDb option. Switching between database backends will require a resync.\nIf you want to test out ParityDB you can add the flag ---database paritydb.\n Depending on the size of the chain when you do this, this step may take anywhere from a few minutes to a few hours.\nIf you are interested in determining how much longer you have to go, your server logs (printed to STDOUT from the phala-node process) will tell you the latest block your node has processed and verified. You can then compare that to the current highest block via Telemetry or the Phala Web App.\n Note: If you do not already have PHA, this is as far as you will be able to go until the end of the soft launch period. You can still run a node, but you will need to have a minimal amount of PHA to continue, as balance transfers are disabled during the soft launch. Please keep in mind that even for those with PHA, they will only be indicating their intent to validate; they will also not be able to run a Gatekeeper until the NPoS phase starts.\n Bond PHA It is highly recommended that you make your controller and stash accounts be two separate accounts. For this, you will create two accounts and make sure each of them have at least enough funds to pay the fees for making transactions. Keep most of your funds in the stash account since it is meant to be the custodian of your staking funds.\nMake sure not to bond all your PHA balance since you will be unable to pay transaction fees from your bonded balance.\nIt is now time to set up our Gatekeeper. We will do the following:\n Bond the PHA of the Stash account. These PHA will be put at stake for the security of the network and can be slashed. Select the Controller. This is the account that will decide when to start or stop validating.  First, go to the Staking section. Click on \u0026ldquo;Account Actions\u0026rdquo;, and then the \u0026ldquo;New stake\u0026rdquo; button.\n Stash account - Select your Stash account. In this example, we will bond 100 milliPHA - make sure that your Stash account contains at least this much. You can, of course, stake more than this. Controller account - Select the Controller account created earlier. This account will also need a small amount of PHA in order to start and stop validating. Value bonded - How much PHA from the Stash account you want to bond/stake. Note that you do not need to bond all of the PHA in that account. Also note that you can always bond more PHA later. However, withdrawing any bonded amount requires the duration of the unbonding period. On Phala Network, the unbonding period is 7 days. Payment destination - The account where the rewards from validating are sent. More info here.  Once everything is filled in properly, click Bond and sign the transaction with your Stash account.\nAfter a few seconds, you should see an \u0026ldquo;ExtrinsicSuccess\u0026rdquo; message. You should now see a new card with all your accounts (note: you may need to refresh the screen). The bonded amount on the right corresponds to the funds bonded by the Stash account.\nSet Session Keys  Note: The session keys are consensus critical, so if you are not sure if your node has the current session keys that you made the setKeys transaction then you can use one of the two available RPC methods to query your node: hasKey to check for a specific key or hasSessionKeys to check the full session key public key string.\n Once your node is fully synced, stop the process by pressing Ctrl-C. At your terminal prompt, you will now start running the node in validator mode with a flag allowing unsafe RPC calls, needed for some advanced operations.\n./phala-node --validator --name \u0026#34;name on telemetry\u0026#34; You can give your Gatekeeper any name that you like, but note that others will be able to see it, and it will be included in the list of all servers using the same telemetry server. Since numerous people are using telemetry, it is recommended that you choose something likely to be unique.\nGenerating the Session Keys You need to tell the chain your Session keys by signing and submitting an extrinsic. This is what associates your Gatekeeper node with your Controller account on Phala Network.\nOption 1: PolkadotJS-APPS You can generate your Session keys in the client via the apps RPC. If you are doing this, make sure that you have the PolkadotJS-Apps explorer attached to your Gatekeeper node. You can configure the apps dashboard to connect to the endpoint of your Gatekeeper in the Settings tab. If you are connected to a default endpoint hosted by Parity of Web3 Foundation, you will not be able to use this method since making RPC requests to this node would effect the local keystore hosted on a public node and you want to make sure you are interacting with the keystore for your node.\nOnce ensuring that you have connected to your node, the easiest way to set session keys for your node is by calling the author_rotateKeys RPC request to create new keys in your Gatekeeper\u0026rsquo;s keystore. Navigate to Toolbox tab and select RPC Calls then select the author \u0026gt; rotateKeys() option and remember to save the output that you get back for a later step.\nOption 2: CLI If you are on a remote server, it is easier to run this command on the same machine (while the node is running with the default HTTP RPC port configured):\ncurl -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#39;{\u0026#34;id\u0026#34;:1, \u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;author_rotateKeys\u0026#34;, \u0026#34;params\u0026#34;:[]}\u0026#39; http://localhost:9933 The output will have a hex-encoded \u0026ldquo;result\u0026rdquo; field. The result is the concatenation of the four public keys. Save this result for a later step.\nYou can restart your node at this point, omitting the --unsafe-rpc-expose flag as it is no longer needed.\nSubmitting the setKeys Transaction You need to tell the chain your Session keys by signing and submitting an extrinsic. This is what associates your validator with your Controller account.\nGo to Staking \u0026gt; Account Actions, and click \u0026ldquo;Set Session Key\u0026rdquo; on the bonding account you generated earlier. Enter the output from author_rotateKeys in the field and click \u0026ldquo;Set Session Key\u0026rdquo;.\nSubmit this extrinsic and you are now ready to start validating.\nRegister TEE worker Gatekeepers utilize TEE to manage the secret keys in Phala Network. Before starting validating, you need to attach the TEE hardware to your Gatekeeper accounts. As long as the Gatekeeper is running and validating the blockchain, the TEE worker is always connected to the blockchain and support the network.\nThe TEE worker is handled by two components: pHost and pRuntime. The latest prebuilt binaries can be found from the Github release page in tee-release.zip. Instead, you can also compile it on your own.\nAssuming you have extracted the prebuilt binares in a directory and have a running and fully synced phala-node, you can take the following steps to attach the TEE components to the blockchain:\n Start pRuntime: ./app Start pHost with proper flags:  ./phost \\ --mnemonic '\u0026lt;the-mnenomic-of-your-controller-account\u0026gt;' \\ --no-sync \\ --no-write-back \\ --remote-attestation \\ --substrate-ws-endpoint 'ws://localhost:9944' The mnenomic of your controller account is needed because phost will send transactions to register your TEE hardware on behalve of your controller account.\nThe prebuilt release also includes bridge.sh, a convinient script to bring up phost in the same way described above. With the script file, you can save the mnemonic permanently, avoding typing it everytime you run it.\n Note: In Phala Network Testnet PoC-2, the TEE worker registration is an one-shot job. phost will exit right after a successful registeration. However in future version, since TEE supports the TEE network in the full life-time of a Gatekeeper, it must be always up and running until the Gatekeeper is retired.\n Validate To verify that your node is live and synchronized, head to Telemetry and find your node. Note that this will show all nodes on the Phala Network, which is why it is important to select a unique name!\nIf everything looks good, go ahead and click on \u0026ldquo;Validate\u0026rdquo; in Phala Network UI.\n Payment preferences - You can specify the percentage of the rewards that will get paid to you. The remaining will be split among your nominators.  Click \u0026ldquo;Validate\u0026rdquo;.\n Note: This step will fail if you haven\u0026rsquo;t successfully registered a TEE worker on your controller account. Please double check Register TEE worker to make sure your TEE hardware is registered.\n If you go to the \u0026ldquo;Staking\u0026rdquo; tab, you will see a list of active Gatekeepers currently running on the network. At the top of the page, it shows the number of Gatekeeper slots that are available as well as the number of nodes that have signaled their intention to be a Gatekeeper. You can go to the \u0026ldquo;Waiting\u0026rdquo; tab to double check to see whether your node is listed there.\nThe Gatekeeper set is refreshed every era. In the next era, if there is a slot available and your node is selected to join the Gatekeeper set, your node will become an active Gatekeeper. Until then, it will remain in the waiting queue. If your Gatekeeper is not selected to become part of the Gatekeeper set, it will remain in the waiting queue until it is. There is no need to re-start if you are not selected for the Gatekeeper set in a particular era. However, it may be necessary to increase the number of PHA staked or seek out nominators for your Gatekeeper in order to join the Gatekeeper set.\nCongratulations! If you have followed all of these steps, and been selected to be a part of the Gatekeeper set, you are now running a Phala Network Gatekeeper! If you need help, reach out on the Phala Network Telegram group.\nFAQ Why am I unable to synchronize the chain with 0 peers? Make sure to enable 30333 libp2p port. Eventually, it will take a little bit of time to discover other peers over the network.\nHow do I clear all my chain data? ./phala-node purge-chain "
},
{
	"uri": "https://wiki.phala.network/zh-cn/basics/run-a-full-node/",
	"title": "运行全节点",
	"tags": [],
	"description": "",
	"content": "这是一份关于如何在 Phala PoC-2 测试网 上安装全节点的教程。如果你有任何疑问，可以扫码回复节点，进入节点答疑群。\n在开始跑节点之前，我们先讲一讲 Phala 上的节点类型。\n节点类型 一条区块链的成长，由创世区块（genesis block）开始，由 交易（extrinsic） 和事件（event）推动。\nPhala上的守门人节点（Gatekeeper）封装区块1时，会获取区块0的状态，将未确定的状态添加到新区块之上，并生成事件。随后，区块2也会如此进行封装，区块3同理。如果超过三分之二的守门人都认定一个区块是有效的，则此区块的封装完结（finalize）。如此循环往复。\n这个过程将由以下几种节点参与。\n 归档节点（Archive Node）：负责保存已经封装好的区块。因为有归档节点的存在，我们才可以很方便地查看过去的链上记录，如某个账号在某个时间点的余额，或哪个状态生成的交易是快速操作。不过，归档节点对存储空间有很高的要求。例，要归档 Kusama 网络上 160 万个区块大概需要 15 - 20 GB 的存储空间。如果你想运行一个守门人节点，则需要配置两倍于此要求的存储空间，因为每一个守门人节点同时都是归档节点。 全节点（Full Node）：相比归档节点，全节点要精简许多。它不会保存第 256 个区块之前的信息，只保留包括创始区块在内的旧区块的交易。如此精简过后，一个全节点所需的存储空间就远远小于归档节点了。不过，要想在全节点上查询某个过去链上状态，用户需要等待区块链重建至某个需要查询的区块。全节点无需外部指令或变成归档节点即可重建整个链。需要注意的是，如果由于各种原因，区块的完结被阻塞在 256 个区块以前，精简过的节点就无法再与网络同步了。 轻节点（Light Node）：轻节点上只有 Runtime 和实时状态，不保存任何过往交易，也不同步从创世区块开始的整条链。  归档节点对于需要经常查询过往链上信息的应用或功能来说更实用，如浏览器、议会记录（council scanner）、议事平台（如 Polkassenbly）等。\n全节点人人可用。有了自己的节点，你就可以随时查看链上状态，直接向链上提交交易，而不必经由某个中心化的节点商。\n轻节点则适合设备不那么高级的用户。一种有趣的轻节点是 Google 浏览器扩展插件，一个插件就是一个节点，Runtime 以 WASM 格式运行。详情可戳链接：https://github.com/paritytech/substrate-light-ui\n快速安装指南 (Linux)  不建议已经是守门人节点的设备继续此教程。详情请参见 《如何安全搭建守门人节点》\n 你可以前往 phala-blockchain 的 Github 发布页面 获取最新的可执行程序 。下方代码可能会有一点点古老。\n此外，预编译的程序可能无法在老版本的 Linux 或特殊架构上运行。如果出现类似 cannot execute binary file: Exec format error 的错误，可能是由可执行程序版本和系统不兼容导致的。你可能需要重新编译一遍，或使用 Docker。\n 运行 curl -sL https://github.com/Phala-Network/phala-blockchain/releases/download/poc2-2.0/phala-node -o phala-node 来下载可执行程序 运行 sudo chmod +x phala-node 运行 ./phala-node --chain poc2 --name \u0026quot;你的节点名\u0026quot; 现在，你就可以在 Polkadot Telemetry 上看见自己的节点了。  快速安装指南 (Mac)  不建议已经是守门人节点的设备继续此教程。详情请参见 《如何安全搭建守门人节点》\n  在 macOS 的搜索框中输入“终端”或“terminal”来打开终端程序 运行 /bin/bash -c \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\u0026quot; 以安装 Homebrew 运行 brew install openssl cmake llvm 运行 curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh 以安装 Rust 然后运行以下代码以克隆 phala-blockchain 代码库并编译： git clone https://github.com/Phala-Network/phala-blockchain cd phala-blockchain ./scripts/init.sh cargo build –-release  运行 ./target/release/phala-node --chain poc2 --name \u0026quot;你的节点名\u0026quot; 以启动节点 现在，你就可以在 Polkadot Telemetry 上看见自己的节点了。  获取 Substrate 你可以点击 此处 查看官方教程。鉴于 Windows 系统暂时不支持 Substrate，我们建议在一个 Linux 虚拟机里运行全节点。\n运行 cargo --version 指令以检测节点是否安装成功。\n$ cargo --version cargo 1.41.0 (626f0f40e 2019-12-03) 克隆代码、编译 Phala-Network/phala-blockchain 的 Github 代码库已经包含了最新的 Phala Network 代码。\ngit clone https://github.com/Phala-Network/phala-blockchain cd phala-blockchain ./scripts/init.sh cargo build --release 运行 编译生成的程序位于 target/release，文件名为 phala-node.\n./target/release/phala-node --chain poc2 --name \u0026#34;你的节点名\u0026#34; 你可以使用 --help 选项查看有哪些命令行选项可以在跑节点时使用。如果你想连接到远程端的节点，可以开启 --ws-external 和 --rpc-cors all 选项。\n根据网路带宽、CPU性能、硬盘读写速度、RAM 读写速度的不同，区块链的同步时间也会有所不同。\n至此，你已经完成了和 Phala 网络的同步，恭喜 :)\n运行归档节点 如果你只运行一个精简版的同步型节点（如上文所述），只有前 256 个区块的状态会被保留。作为验证人时，节点会默认设为归档模式。此时可以使用 --pruning 参数来强制保存全部链上状态。\n./target/release/phala-node --chain poc2 --name \u0026#34;你的节点名\u0026#34; --pruning archive 你可以用--wasm-execution Compiled 加速同步，最高可能提升四倍速度。但这也会占用更多 CPU 运存和内存。所以记得在同步完后把它恢复到常态。\n使用 Docker 运行节点 用 Docker 运行节点是可行的，但可能涉及到一些高级的操作。我们建议已经对 Docker 比较熟悉或已经部署过 Docker 的人继续这一步。\n你可以在 这里 找到 Docker 相关的材料。Docker 默认只产生两个本地测试网节点，更适用于开发。你也可以编写自己的 Docker 文件并连接到 Phala PoC-2 测试网。\n"
},
{
	"uri": "https://wiki.phala.network/zh-cn/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://wiki.phala.network/zh-cn/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]