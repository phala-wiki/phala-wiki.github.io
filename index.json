[
{
	"uri": "wiki.phala.network/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Basics Run a full node to support the network connectivity, or run a Gatekeeper to serve the network and earn rewards.\n"
},
{
	"uri": "wiki.phala.network/",
	"title": "Phala Network Wiki",
	"tags": [],
	"description": "",
	"content": "Phala Network Phala Network guarantees the reliable execution of smart contracts while keeping the data secretly. Confidential contracts run in miner nodes with Trusted Computing capable hardwares, which guarantees the secrecy of the contract data.\nFeatured Tutorials  Run a full node Run a Gatekeeper  "
},
{
	"uri": "wiki.phala.network/basics/run-a-gatekeeper/",
	"title": "Run a Gatekeeper",
	"tags": [],
	"description": "",
	"content": "This guide will instruct you how to set up a validator node on the Phala Network.\nPreliminaries Running a Gatekeeper on a live network is a lot of responsibility! You will be accountable for not only your own stake, but also the stake of your current nominators. If you make a mistake and get slashed, your money and your reputation will be at risk. However, running a Gatekeeper can also be very rewarding, knowing that you contribute to the security of a decentralized network while growing your stash.\nSince security is so important to running a successful Gatekeeper, you should take a look at Phala Network\u0026rsquo;s the secure validator information to make you understand the factors to consider when constructing your infrastructure. The Web3 Foundation also maintains a reference implementation for a secure validator set-up that you can use by deploying yourself (video walkthrough is available here). As you progress in your journey as a Gatekeeper, you will likely want to use this repository as a starting point for your own modifications and customizations.\nIf you need help, please reach out on the Phala Network Group on Telegram. The team and other Gatekeepers are there to help answer questions and provide experience.\nHow many PHA do I need? You can have a rough estimate on that by using the methods listed here. Gatekeepers are elected based on Phragmen\u0026rsquo;s algorithm. To be elected into the set, you need a minimum stake behind your Gatekeeper. This stake can come from yourself or from nominators. This means that as a minimum, you will need enough PHA to set up Stash and Controller accounts with the existential deposit, plus a little extra for transaction fees. The rest can come from nominators.\nWarning: Any PHA that you stake for your Gatekeeper is liable to be slashed, meaning that an insecure or improper setup may result in loss of PHA tokens! If you are not confident in your ability to run a Gatekeeper node, it is recommended to nominate your PHA to a trusted Gatekeeper node instead.\nInitial Set-up Requirements You will likely run your Gatekeeper on a server with TEE hardware running Linux. For this guide we will be using Ubuntu 18.04, but the instructions should be similar for other platforms.\nThe transactions weights in Phala Network were benchmarked on standard hardware. It is recommended that Gatekeepers run at least the standard hardware in order to ensure they are able to process all blocks in time. The following are not minimum requirements but if you decide to run with less than this beware that you might have performance issue.\nStandard Hardware For the full details of the standard hardware please see here.\n CPU - 2 cores, with Intel SGX capability. Storage - A NVMe solid state drive. Should be reasonably sized to deal with blockchain growth. Starting around 80GB - 160GB will be okay for the first six months of Phala Network, but will need to be re-evaluated every six months. Memory - 2GB - 8GB. 2GB is really the minimum memory you should operate your Gatekeeper with, anything less than this make build times too inconvenient. For better performance you can bump it up to 4GB or 8GB, but anything more than that is probably over-kill. In order to compile the binary yourself you will likely need ~8GB.  The specs posted above are by no means the minimum specs that you could use when running a Gatekeeper, however you should be aware that if you are using less you may need to toggle some extra optimizations in order to be equal to other Gatekeepers that are running the standard.\nInstall Intel SGX driver \u0026amp; platform software You can find the latest Linux SGX driver from the official download page. Make sure to install:\n SGX Linux DCAP Driver (Under /opt) SGX Linux SDK SGX Platform Swoftware  The dockerfile offered by Teaclave SGX SDK is a good reference of how to install the SGX driver, SDK and platform software.\nInstall the phala-node Binary Download the latest Phala Network binary from the Github release page.\nYou can also build the phala-node binary from the Phala-Network/phala-blockchain repository on GitHub using the source code available in the master branch. You will need to prepare the rust build environment described in the Run a Full Node tutorial.\n Note: If you prefer to use SSH rather than HTTPS, you can replace the first line of the below with git clone git@github.com/Phala-Network/phala-blockchain.git.\n git clone https://github.com/Phala-Network/phala-blockchain cd phala-blockchain ./scripts/init.sh cargo build â€“-release This step will take a while (generally 10 - 40 minutes, depending on your hardware).\n Note if you run into compile errors, you may have to switch to a less recent nightly. This can be done by running:\nrustup install nightly-2020-05-15 rustup override set nightly-2020-05-15 rustup target add wasm32-unknown-unknown --toolchain nightly-2020-05-15  If you are interested in generating keys locally, you can also install subkey from the same directory. You may then take the generated subkey executable and transfer it to an air-gapped machine for extra security.\ncargo install --force --git https://github.com/paritytech/substrate subkey Synchronize Chain Data  Note: By default, Gatekeeper nodes are in archive mode. If you\u0026rsquo;ve already synced the chain not in archive mode, you must first remove the database with phala-node purge-chain and then ensure that you run Phala Network with the --pruning=archive option.\nYou may run a Gatekeeper node in non-archive mode by adding the following flags: -unsafe-pruning --pruning OF BLOCKS\u0026gt;, but note that an archive node and non-archive node\u0026rsquo;s databases are not compatible with each other, and to switch you will need to purge the chain data.\n You can begin syncing your node by running the following command:\n./phala-node --pruning=archive if you do not want to start in Gatekeeper mode right away.\nThe --pruning=archive flag is implied by the --validator and --sentry flags, so it is only required explicitly if you start your node without one of these two options. If you do not set your pruning to archive node, even when not running in Gatekeeper and sentry mode, you will need to re-sync your database when you switch.\n Note: Gatekeepers should sync using the RocksDb backend. This is implicit by default, but can be explicit by passing the --database RocksDb flag. In the future, it is recommended to switch to using the faster and more efficient ParityDb option. Switching between database backends will require a resync.\nIf you want to test out ParityDB you can add the flag ---database paritydb.\n Depending on the size of the chain when you do this, this step may take anywhere from a few minutes to a few hours.\nIf you are interested in determining how much longer you have to go, your server logs (printed to STDOUT from the phala-node process) will tell you the latest block your node has processed and verified. You can then compare that to the current highest block via Telemetry or the Phala Web App.\n Note: If you do not already have PHA, this is as far as you will be able to go until the end of the soft launch period. You can still run a node, but you will need to have a minimal amount of PHA to continue, as balance transfers are disabled during the soft launch. Please keep in mind that even for those with PHA, they will only be indicating their intent to validate; they will also not be able to run a Gatekeeper until the NPoS phase starts.\n Bond PHA It is highly recommended that you make your controller and stash accounts be two separate accounts. For this, you will create two accounts and make sure each of them have at least enough funds to pay the fees for making transactions. Keep most of your funds in the stash account since it is meant to be the custodian of your staking funds.\nMake sure not to bond all your PHA balance since you will be unable to pay transaction fees from your bonded balance.\nIt is now time to set up our Gatekeeper. We will do the following:\n Bond the PHA of the Stash account. These PHA will be put at stake for the security of the network and can be slashed. Select the Controller. This is the account that will decide when to start or stop validating.  First, go to the Staking section. Click on \u0026ldquo;Account Actions\u0026rdquo;, and then the \u0026ldquo;New stake\u0026rdquo; button.\n Stash account - Select your Stash account. In this example, we will bond 100 milliPHA - make sure that your Stash account contains at least this much. You can, of course, stake more than this. Controller account - Select the Controller account created earlier. This account will also need a small amount of PHA in order to start and stop validating. Value bonded - How much PHA from the Stash account you want to bond/stake. Note that you do not need to bond all of the PHA in that account. Also note that you can always bond more PHA later. However, withdrawing any bonded amount requires the duration of the unbonding period. On Phala Network, the unbonding period is 7 days. Payment destination - The account where the rewards from validating are sent. More info here.  Once everything is filled in properly, click Bond and sign the transaction with your Stash account.\nAfter a few seconds, you should see an \u0026ldquo;ExtrinsicSuccess\u0026rdquo; message. You should now see a new card with all your accounts (note: you may need to refresh the screen). The bonded amount on the right corresponds to the funds bonded by the Stash account.\nSet Session Keys  Note: The session keys are consensus critical, so if you are not sure if your node has the current session keys that you made the setKeys transaction then you can use one of the two available RPC methods to query your node: hasKey to check for a specific key or hasSessionKeys to check the full session key public key string.\n Once your node is fully synced, stop the process by pressing Ctrl-C. At your terminal prompt, you will now start running the node in validator mode with a flag allowing unsafe RPC calls, needed for some advanced operations.\n./phala-node --validator --name \u0026#34;name on telemetry\u0026#34; You can give your Gatekeeper any name that you like, but note that others will be able to see it, and it will be included in the list of all servers using the same telemetry server. Since numerous people are using telemetry, it is recommended that you choose something likely to be unique.\nGenerating the Session Keys You need to tell the chain your Session keys by signing and submitting an extrinsic. This is what associates your Gatekeeper node with your Controller account on Phala Network.\nOption 1: PolkadotJS-APPS You can generate your Session keys in the client via the apps RPC. If you are doing this, make sure that you have the PolkadotJS-Apps explorer attached to your Gatekeeper node. You can configure the apps dashboard to connect to the endpoint of your Gatekeeper in the Settings tab. If you are connected to a default endpoint hosted by Parity of Web3 Foundation, you will not be able to use this method since making RPC requests to this node would effect the local keystore hosted on a public node and you want to make sure you are interacting with the keystore for your node.\nOnce ensuring that you have connected to your node, the easiest way to set session keys for your node is by calling the author_rotateKeys RPC request to create new keys in your Gatekeeper\u0026rsquo;s keystore. Navigate to Toolbox tab and select RPC Calls then select the author \u0026gt; rotateKeys() option and remember to save the output that you get back for a later step.\nOption 2: CLI If you are on a remote server, it is easier to run this command on the same machine (while the node is running with the default HTTP RPC port configured):\ncurl -H \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#39;{\u0026#34;id\u0026#34;:1, \u0026#34;jsonrpc\u0026#34;:\u0026#34;2.0\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;author_rotateKeys\u0026#34;, \u0026#34;params\u0026#34;:[]}\u0026#39; http://localhost:9933 The output will have a hex-encoded \u0026ldquo;result\u0026rdquo; field. The result is the concatenation of the four public keys. Save this result for a later step.\nYou can restart your node at this point, omitting the --unsafe-rpc-expose flag as it is no longer needed.\nSubmitting the setKeys Transaction You need to tell the chain your Session keys by signing and submitting an extrinsic. This is what associates your validator with your Controller account.\nGo to Staking \u0026gt; Account Actions, and click \u0026ldquo;Set Session Key\u0026rdquo; on the bonding account you generated earlier. Enter the output from author_rotateKeys in the field and click \u0026ldquo;Set Session Key\u0026rdquo;.\nSubmit this extrinsic and you are now ready to start validating.\nRegister TEE worker Gatekeepers utilize TEE to manage the secret keys in Phala Network. Before starting validating, you need to attach the TEE hardware to your Gatekeeper accounts. As long as the Gatekeeper is running and validating the blockchain, the TEE worker is always connected to the blockchain and support the network.\nThe TEE worker is handled by two components: pHost and pRuntime. The latest prebuilt binaries can be found from the Github release page in tee-release.zip. Instead, you can also compile it on your own.\nAssuming you have extracted the prebuilt binares in a directory and have a running and fully synced phala-node, you can take the following steps to attach the TEE components to the blockchain:\n Start pRuntime: ./app Start pHost with proper flags:  ./phost \\ --mnemonic '\u0026lt;the-mnenomic-of-your-controller-account\u0026gt;' \\ --no-sync \\ --no-write-back \\ --remote-attestation \\ --substrate-ws-endpoint 'ws://localhost:9944' The mnenomic of your controller account is needed because phost will send transactions to register your TEE hardware on behalve of your controller account.\nThe prebuilt release also includes bridge.sh, a convinient script to bring up phost in the same way described above. With the script file, you can save the mnemonic permanently, avoding typing it everytime you run it.\n Note: In Phala Network Testnet PoC-2, the TEE worker registration is an one-shot job. phost will exit right after a successful registeration. However in future version, since TEE supports the TEE network in the full life-time of a Gatekeeper, it must be always up and running until the Gatekeeper is retired.\n Validate To verify that your node is live and synchronized, head to Telemetry and find your node. Note that this will show all nodes on the Phala Network, which is why it is important to select a unique name!\nIf everything looks good, go ahead and click on \u0026ldquo;Validate\u0026rdquo; in Phala Network UI.\n Payment preferences - You can specify the percentage of the rewards that will get paid to you. The remaining will be split among your nominators.  Click \u0026ldquo;Validate\u0026rdquo;.\n Note: This step will fail if you haven\u0026rsquo;t successfully registered a TEE worker on your controller account. Please double check Register TEE worker to make sure your TEE hardware is registered.\n If you go to the \u0026ldquo;Staking\u0026rdquo; tab, you will see a list of active Gatekeepers currently running on the network. At the top of the page, it shows the number of Gatekeeper slots that are available as well as the number of nodes that have signaled their intention to be a Gatekeeper. You can go to the \u0026ldquo;Waiting\u0026rdquo; tab to double check to see whether your node is listed there.\nThe Gatekeeper set is refreshed every era. In the next era, if there is a slot available and your node is selected to join the Gatekeeper set, your node will become an active Gatekeeper. Until then, it will remain in the waiting queue. If your Gatekeeper is not selected to become part of the Gatekeeper set, it will remain in the waiting queue until it is. There is no need to re-start if you are not selected for the Gatekeeper set in a particular era. However, it may be necessary to increase the number of PHA staked or seek out nominators for your Gatekeeper in order to join the Gatekeeper set.\nCongratulations! If you have followed all of these steps, and been selected to be a part of the Gatekeeper set, you are now running a Phala Network Gatekeeper! If you need help, reach out on the Phala Network Telegram group.\nFAQ Why am I unable to synchronize the chain with 0 peers? Make sure to enable 30333 libp2p port. Eventually, it will take a little bit of time to discover other peers over the network.\nHow do I clear all my chain data? ./phala-node purge-chain "
},
{
	"uri": "wiki.phala.network/basics/run-a-full-node/",
	"title": "Run a full node",
	"tags": [],
	"description": "",
	"content": "If you\u0026rsquo;re building dapps or products on a Phala Network, you probably want the ability to run a node-as-a-back-end. After all, it\u0026rsquo;s always better to rely on your own infrastructure than on a third-party-hosted one in this brave new decentralized world.\nThis guide will show you how to connect to Phala Network PoC-2. First, let\u0026rsquo;s clarify the term full node.\nTypes of Nodes A blockchain\u0026rsquo;s growth comes from a genesis block, extrinsics, and events.\nWhen a Gatekeeper seals block 1, it takes the blockchain\u0026rsquo;s state at block 0. It then applies all pending changes on top of it, and emits the events that are the result of these changes. Later, the state of the chain at block 1 is used in the same way to build the state of the chain at block 2, and so on. Once two thirds of the Gatekeepers agree on a specific block being valid, it is finalized.\nAn archive node keeps all the past blocks. An archive node makes it convenient to query the past state of the chain at any point in time. Finding out what an account\u0026rsquo;s balance at a certain block was, or which extrinsics resulted in a certain state change are fast operations when using an archive node. However, an archive node takes up a lot of disk space - around Kusama\u0026rsquo;s 1.6 millionth block this was around 15 to 20GB. When running a Gatekeeper, this requirement doubles as the sentry node in front of a Gatekeeper should be an archive node too.\nA full node is pruned, meaning it discards all information older than 256 blocks, but keeps the extrinsics for all past blocks, and the genesis block. A node that is pruned this way requires much less space than an archive node. In order to query past state through a full node, a user would have to wait for the node to rebuild the chain up until that block. A full node can rebuild the entire chain with no additional input from other nodes and become an archive node. One caveat is that if finality stalled for some reason and the last finalized block is more than 256 blocks behind, a pruned full node will not be able to sync to the network.\nArchive nodes are used by utilities that need past information - like block explorers, council scanners, discussion platforms like Polkassembly, and others. They need to be able to look at past on-chain data. Full nodes are used by everyone else - they allow you to read the current state of the chain and to submit transactions directly to the chain without relying on a centralized infrastructure provider.\nAnother type of node is a light node. A light node has only the runtime and the current state, but does not store past extrinsics and so cannot restore the full chain from genesis. Light nodes are useful for resource restricted devices. An interesting use-case of light nodes is a Chrome extension, which is a node in its own right, running the runtime in WASM format: https://github.com/paritytech/substrate-light-ui\nFast Install Instructions (Linux)  Not recommended if you\u0026rsquo;re a Gatekeeper. Please see secure Gatekeeper setup\n For the most recent binary please see the release page on the phala-blockchain repository. The URL in the code snippet below may become slightly out-of-date.\nAlso please note that the nature of pre-built binaries means that they may not work on your particular architecture or Linux distribution. If you see an error like cannot execute binary file: Exec format error it likely means the binary is not compatible with your system. You will either need to compile the source code yourself or use docker.\n Download Phala Network binary by running: curl -sL https://github.com/Phala-Network/phala-blockchain/releases/download/poc2-2.0/phala-node -o phala-node Run the following: sudo chmod +x phala-node Run the following: ./phala-node --chain poc2 --name \u0026quot;Your Node Name Here\u0026quot; Find your node at https://telemetry.polkadot.io/#list/Phala%20PoC-2  Fast Install Instructions (Mac)  Not recommended if you\u0026rsquo;re a Gatekeeper. Please see secure Gatekeeper setup\n  Type terminal in the macOS searchbar/searchlight to open the \u0026lsquo;terminal\u0026rsquo; application Install Homebrew within the terminal by running: /bin/bash -c \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\u0026quot; Then run: brew install openssl cmake llvm Install Rust in your terminal by running: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh Once Rust is installed, run the following command to clone and build the Phala Network code: git clone https://github.com/Phala-Network/phala-blockchain cd phala-blockchain ./scripts/init.sh cargo build â€“-release  Run the following command to start your node: ./target/release/phala-node --chain poc2 --name \u0026quot;My node's name\u0026quot; Find your node at https://telemetry.polkadot.io/#list/Phala%20PoC-2  Get Substrate Follow instructions as outlined here - note that Windows users will have their work cut out for them. It\u0026rsquo;s better to use a virtual machine instead.\nTest if the installation was successful by running cargo --version.\n$ cargo --version cargo 1.41.0 (626f0f40e 2019-12-03) Clone and Build The Phala-Network/phala-blockchain repo\u0026rsquo;s master branch contains the latest Phala Network code.\ngit clone https://github.com/Phala-Network/phala-blockchain cd phala-blockchain ./scripts/init.sh cargo build --release Run The built binary will be in the target/release folder, called phala-node.\n./target/release/phala-node --chain poc2 --name \u0026#34;My node\u0026#39;s name\u0026#34; Use the --help flag to find out which flags you can use when running the node. For example, if connecting to your node remotely, you\u0026rsquo;ll probably want to use --ws-external and --rpc-cors all.\nThe syncing process will take a while depending on your bandwidth, processing power, disk speed and RAM. On a $10 DigitalOcean droplet, the process can complete in some 36 hours.\nCongratulations, you\u0026rsquo;re now syncing with Phala Network. Keep in mind that the process is identical when using any other Substrate chain.\nRunning an Archive Node When running as a simple sync node (above), only the state of the past 256 blocks will be kept. When validating, it defaults to archive mode. To keep the full state use the --pruning flag:\n./target/release/phala-node --chain poc2 --name \u0026#34;My node\u0026#39;s name\u0026#34; --pruning archive It is possible to almost quadruple synchronization speed by using an additional flag: --wasm-execution Compiled. Note that this uses much more CPU and RAM, so it should be turned off after the node is in sync.\nUsing Docker Finally, you can use Docker to run your node in a container. Doing this is a bit more advanced so it\u0026rsquo;s best left up to those that either already have familiarity with docker, or have completed the other set-up instructions in this guide.\nThe reference docker file is located here. Please note that by default the docker file only spawn a two nodes local testnet node, not a single node connecting to the public blockchain. This is mainly used for development. You can create your own docker file for connecting to Phala Network PoC2.\n"
},
{
	"uri": "wiki.phala.network/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "wiki.phala.network/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]